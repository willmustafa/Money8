generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  fullName String
  email String @unique
  password String

  transaction Transaction[]
  ignore Ignore[]
  tag Tag[]
  category Category[]
  creditCard CreditCard[]
  account Account[]
  objective Objective[]
  institution Institution[]
}

model Transaction {
  id String @id @default(uuid())
  description String?
  date DateTime @db.Date
  value Float
  paid Boolean
  fromAccount String?
  fromCreditCard String?
  transferedTo String?
  transferedToObjectiveId String?
  userId String
  categoryId String?
  tagId String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  accountFrom Account? @relation("accountFrom", fields: [fromAccount], references: [id])
  accountTo Account? @relation("accountTo", fields: [transferedTo], references: [id])
  creditCard CreditCard? @relation(fields: [fromCreditCard], references: [id])
  category Category? @relation(fields: [categoryId], references: [id])
  objective Objective? @relation(fields: [transferedToObjectiveId], references: [id])
  tag Tag? @relation(fields: [tagId], references: [id])
}

model Institution {
  id String @id @default(uuid())
  name String
  color String
  icon String
  userId String

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  creditCard CreditCard[]
  account Account[]

  @@unique([name, userId])
}

model Ignore {
  id String @id @default(uuid())
  name String
  userId String

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tag {
  id String @id @default(uuid())
  name String
  userId String

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  transaction Transaction[]
}

model Category {
  id String @id @default(uuid())
  name String
  color String
  icon String
  type String
  userId String
  limit Float?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
}

model CreditCard {
  id String @id @default(uuid())
  limit Float
  dueDate DateTime @db.Date
  closingDate DateTime @db.Date
  institutionId String
  userId String
  name String?

  institution Institution? @relation(fields: [institutionId], references: [id])
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  transaction Transaction[]
}

model Account {
  id String @id @default(uuid())
  initialBalance Float @default(0)
  openingDate DateTime @db.Date
  institutionId String
  userId String

  institution Institution? @relation(fields: [institutionId], references: [id])
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  accountFrom Transaction[] @relation("accountFrom")
  accountTo Transaction[] @relation("accountTo")
}

model Objective {
  id String @id @default(uuid())
  name String
  color String
  value Float
  dueDate DateTime @db.Date
  description String
  status Boolean @default(false)
  userId String

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  transaction Transaction[]
}